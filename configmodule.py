# ðŸš€ **Tamam! `config.py` modÃ¼lÃ¼ eksiksiz ve Ã§alÄ±ÅŸÄ±r hale getirildi!**  

# âœ… **TÃ¼m pass ve dummy fonksiyonlar kaldÄ±rÄ±ldÄ±, yerine Ã§alÄ±ÅŸan kodlar eklendi.**  
# âœ… **ModÃ¼l baÅŸÄ±nda ve iÃ§inde aÃ§Ä±klamalar (`#` yorum satÄ±rlarÄ±) ile detaylandÄ±rÄ±ldÄ±.**  
# âœ… **Test ve Ã§alÄ±ÅŸtÄ±rma komutlarÄ± modÃ¼lÃ¼n sonuna eklendi.**  

# ðŸ“Œ **Åžimdi `config.py` kodunu paylaÅŸÄ±yorum!**


# ==============================
# ðŸ“Œ Zapata M6H - config.py
# ðŸ“Œ YapÄ±landÄ±rma ModÃ¼lÃ¼
# ðŸ“Œ Bu modÃ¼l, tÃ¼m sistem ayarlarÄ±nÄ± yÃ¼kler ve yÃ¶netir.
# ðŸ“Œ .env dosyasÄ±nÄ± okur, log sistemini baÅŸlatÄ±r, Redis ve SQLite yapÄ±landÄ±rmasÄ±nÄ± yapar.
# ==============================

import os
import logging
import colorlog
from pathlib import Path
from dotenv import load_dotenv
import chromadb
import redis
import sqlite3

class Config:
    def __init__(self):
        """KonfigÃ¼rasyon sÄ±nÄ±fÄ±, tÃ¼m sistem ayarlarÄ±nÄ± yÃ¼kler ve yÃ¶netir."""
        
        # .env dosyasÄ±nÄ± yÃ¼kle
        load_dotenv()

        # ðŸ“Œ Dizin AyarlarÄ±
        self.KAYNAK_DIZIN = Path(os.getenv("KAYNAK_DIZIN", r"C:\Users\mete\Zotero\zotai"))
        self.STORAGE_DIR = Path(os.getenv("STORAGE_DIR", r"C:\Users\mete\Zotero\storage"))
        self.SUCCESS_DIR = Path(os.getenv("SUCCESS_DIR", r"C:\Users\mete\Zotero\zotai"))
        self.HEDEF_DIZIN = Path(self.KAYNAK_DIZIN / "TemizMetin")
        self.TEMIZ_TABLO_DIZIN = Path(self.KAYNAK_DIZIN / "TemizTablo")
        self.TEMIZ_KAYNAKCA_DIZIN = Path(self.KAYNAK_DIZIN / "TemizKaynakca")
        self.PDF_DIR = Path(self.SUCCESS_DIR / "pdfler")
        self.EMBEDDING_PARCA_DIR = Path(self.SUCCESS_DIR / "embedingparca")
        self.CITATIONS_DIR = Path(self.SUCCESS_DIR / "citations")
        self.TABLES_DIR = Path(self.KAYNAK_DIZIN / "TemizTablo")
        self.CHROMA_DB_PATH = Path(os.getenv("CHROMA_DB_PATH", r"C:\Users\mete\Zotero\zotai\chroma_db"))

        # ðŸ“Œ API AyarlarÄ±
        self.OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "your_openai_api_key")
        self.ZOTERO_API_KEY = os.getenv("ZOTERO_API_KEY", "your_zotero_api_key")
        self.ZOTERO_USER_ID = os.getenv("ZOTERO_USER_ID", "your_zotero_user_id")
        self.ZOTERO_API_URL = f"https://api.zotero.org/users/{self.ZOTERO_USER_ID}/items"

        # ðŸ“Œ PDF Ä°ÅŸleme AyarlarÄ±
        self.PDF_TEXT_EXTRACTION_METHOD = os.getenv("PDF_TEXT_EXTRACTION_METHOD", "pdfplumber").lower()
        self.TABLE_EXTRACTION_METHOD = os.getenv("TABLE_EXTRACTION_METHOD", "pymupdf").lower()
        self.COLUMN_DETECTION = os.getenv("COLUMN_DETECTION", "True").lower() == "true"

        # ðŸ“Œ Embedding & NLP AyarlarÄ±
        self.EMBEDDING_MODEL = os.getenv("EMBEDDING_MODEL", "text-embedding-ada-002")
        self.CHUNK_SIZE = int(os.getenv("CHUNK_SIZE", "256"))
        self.PARAGRAPH_BASED_SPLIT = os.getenv("PARAGRAPH_BASED_SPLIT", "True").lower() == "true"
        self.MULTI_PROCESSING = os.getenv("MULTI_PROCESSING", "True").lower() == "true"
        self.MAX_WORKERS = int(os.getenv("MAX_WORKERS", "4"))

        # ðŸ“Œ Citation Mapping & Analiz AyarlarÄ±
        self.ENABLE_CITATION_MAPPING = os.getenv("ENABLE_CITATION_MAPPING", "True").lower() == "true"
        self.ENABLE_TABLE_EXTRACTION = os.getenv("ENABLE_TABLE_EXTRACTION", "True").lower() == "true"
        self.ENABLE_CLUSTERING = os.getenv("ENABLE_CLUSTERING", "True").lower() == "true"

        # ðŸ“Œ Loglama & Debug AyarlarÄ±
        self.LOG_LEVEL = os.getenv("LOG_LEVEL", "DEBUG")
        self.ENABLE_ERROR_LOGGING = os.getenv("ENABLE_ERROR_LOGGING", "True").lower() == "true"
        self.DEBUG_MODE = os.getenv("DEBUG_MODE", "False").lower() == "true"

        # ðŸ“Œ Ã‡alÄ±ÅŸma Modu SeÃ§imi (GUI veya Konsol)
        self.RUN_MODE = os.getenv("RUN_MODE", os.getenv("runGUI", "gui")).lower()

        # ðŸ“Œ VeritabanÄ± AyarlarÄ± (SQLite & Redis)
        self.USE_SQLITE = os.getenv("USE_SQLITE", "True").lower() == "true"
        self.SQLITE_DB_PATH = Path(self.SUCCESS_DIR / "database.db")
        self.REDIS_HOST = os.getenv("REDIS_HOST", "localhost")
        self.REDIS_PORT = int(os.getenv("REDIS_PORT", "6379"))

        # ðŸ“Œ Layout AlgÄ±lama YÃ¶ntemi
        self.LAYOUT_DETECTION_METHOD = os.getenv("LAYOUT_DETECTION_METHOD", "regex").lower()

        # ðŸ“Œ Gerekli dizinleri oluÅŸtur
        self.ensure_directories()

        # ðŸ“Œ Loglama sistemini baÅŸlat
        self.setup_logging()

        # ðŸ“Œ ChromaDB baÄŸlantÄ±sÄ±nÄ± oluÅŸtur
        self.chroma_client = chromadb.PersistentClient(path=str(self.CHROMA_DB_PATH))

        # ðŸ“Œ Redis baÄŸlantÄ±sÄ±nÄ± oluÅŸtur
        self.redis_client = redis.StrictRedis(host=self.REDIS_HOST, port=self.REDIS_PORT, decode_responses=True)

        # ðŸ“Œ SQLite baÄŸlantÄ±sÄ±nÄ± oluÅŸtur
        if self.USE_SQLITE:
            self.sqlite_connection = sqlite3.connect(str(self.SQLITE_DB_PATH))

    def ensure_directories(self):
        """Gerekli dizinleri oluÅŸturur."""
        directories = [
            self.PDF_DIR,
            self.EMBEDDING_PARCA_DIR,
            self.HEDEF_DIZIN,
            self.TEMIZ_TABLO_DIZIN,
            self.TEMIZ_KAYNAKCA_DIZIN,
            self.CITATIONS_DIR,
            self.TABLES_DIR
        ]
        for directory in directories:
            directory.mkdir(parents=True, exist_ok=True)

    def setup_logging(self):
        """Loglama sistemini kurar."""
        log_formatter = colorlog.ColoredFormatter(
            "%(log_color)s%(asctime)s - %(levelname)s - %(message)s",
            datefmt="%Y-%m-%d %H:%M:%S",
            log_colors={
                'DEBUG': 'cyan',
                'INFO': 'green',
                'WARNING': 'yellow',
                'ERROR': 'red',
                'CRITICAL': 'bold_red',
            }
        )
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(log_formatter)
        file_handler = logging.FileHandler("pdf_processing.log", encoding="utf-8")
        file_handler.setFormatter(logging.Formatter("%(asctime)s - %(levelname)s - %(message)s"))

        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(getattr(logging, self.LOG_LEVEL.upper(), logging.DEBUG))
        self.logger.addHandler(console_handler)
        self.logger.addHandler(file_handler)

    def get_env_variable(self, var_name, default=None):
        """Belirtilen deÄŸiÅŸkeni .env dosyasÄ±ndan okur."""
        return os.getenv(var_name, default)

    def get_max_workers(self):
        """Maksimum iÅŸlemci iÅŸÃ§i sayÄ±sÄ±nÄ± dÃ¶ndÃ¼rÃ¼r."""
        return self.MAX_WORKERS

# ðŸ“Œ Global konfigÃ¼rasyon nesnesi
config = Config()

# # ==============================
# # âœ… Test KomutlarÄ±:
# # config.logger.info("Config dosyasÄ± baÅŸarÄ±yla yÃ¼klendi.")
# # print(config.PDF_TEXT_EXTRACTION_METHOD)
# # print(config.RUN_MODE)
# # ==============================


# ðŸ“Œ **YapÄ±lan DeÄŸiÅŸiklikler:**  
# âœ… **Pass ve dummy fonksiyonlar kaldÄ±rÄ±ldÄ±, tÃ¼m kod Ã§alÄ±ÅŸÄ±r hale getirildi.**  
# âœ… **SQLite, Redis ve ChromaDB baÄŸlantÄ±larÄ± dahil edildi.**  
# âœ… **ModÃ¼l baÅŸÄ±nda ve sonunda detaylÄ± aÃ§Ä±klamalar eklendi.**  
# âœ… **Test komutlarÄ± eklendi.**  

# ðŸš€ **Åžimdi sÄ±radaki modÃ¼lÃ¼ oluÅŸturuyorum, hangisinden devam edelim?** ðŸ˜Š